import org.apache.tools.ant.taskdefs.condition.Os
///////////////////////////////////////////////////////////////////////////////
//  GRADLE CONFIGURATION
///////////////////////////////////////////////////////////////////////////////
plugins {
    java
    id("com.diffplug.spotless") version "6.25.0"
    id("io.quarkus") version "1.8.1.Final"
}
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.eclipse.keypop:keypop-gradle:0.1.+") { isChanging = true }
    }
}
apply(plugin = "org.eclipse.keypop")

///////////////////////////////////////////////////////////////////////////////
//  APP CONFIGURATION
///////////////////////////////////////////////////////////////////////////////
repositories {
    mavenLocal()
    mavenCentral()
    maven(url = "https://central.sonatype.com/repository/maven-snapshots/")
    maven(url = "https://oss.sonatype.org/content/repositories/snapshots/")
}

val jarName = quarkus.finalName().replace("-SNAPSHOT", "")
quarkus.setFinalName(jarName)

val javaSourceLevel: String by project
val javaTargetLevel: String by project
java {
    sourceCompatibility = JavaVersion.toVersion(javaSourceLevel)
    targetCompatibility = JavaVersion.toVersion(javaTargetLevel)
    println("Compiling Java $sourceCompatibility to Java $targetCompatibility.")
}

dependencies {
    // Demo common
    implementation("org.calypsonet.keyple:keyple-demo-ticketing-common-lib:2.1.0-SNAPSHOT") { isChanging = true }

    // Begin Keyple configuration (generated by 'https://keyple.org/components/overview/configuration-wizard/')
    implementation("org.eclipse.keypop:keypop-reader-java-api:2.0.1")
    implementation("org.eclipse.keypop:keypop-calypso-card-java-api:2.1.2")
    implementation("org.eclipse.keypop:keypop-calypso-crypto-legacysam-java-api:0.7.0")
    implementation("org.eclipse.keypop:keypop-storagecard-java-api:0.1.0-SNAPSHOT")
    implementation("org.eclipse.keyple:keyple-common-java-api:2.0.1")
    implementation("org.eclipse.keyple:keyple-util-java-lib:2.4.0")
    implementation("org.eclipse.keyple:keyple-service-java-lib:3.3.5")
    implementation("org.eclipse.keyple:keyple-service-resource-java-lib:3.1.0")
    implementation("org.eclipse.keyple:keyple-distributed-network-java-lib:2.5.1")
    implementation("org.eclipse.keyple:keyple-distributed-remote-java-lib:2.5.1")
    implementation("org.eclipse.keyple:keyple-card-calypso-java-lib:3.1.7")
    implementation("org.eclipse.keyple:keyple-card-calypso-crypto-legacysam-java-lib:0.9.0")
    implementation("org.eclipse.keyple:keyple-plugin-pcsc-java-lib:2.5.1")
    // End Keyple configuration

    // CNA specific components
    implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))

    // Quarkus
    implementation(enforcedPlatform("io.quarkus:quarkus-universe-bom:1.8.1.Final"))
    implementation("io.quarkus:quarkus-resteasy-jsonb")
    implementation("io.quarkus:quarkus-resteasy")
    // Google GSON
    implementation("com.google.code.gson:gson:2.10.1")
    // Logging
    implementation("org.slf4j:slf4j-api:1.7.32")
    implementation("org.slf4j:slf4j-simple:1.7.32")
}

///////////////////////////////////////////////////////////////////////////////
//  TASKS CONFIGURATION
///////////////////////////////////////////////////////////////////////////////
tasks {
    spotless {
        java {
            target("**/src/**/*.java")
            licenseHeaderFile("${project.rootDir}/LICENSE_HEADER_BSD_3-CLAUSE")
            importOrder("java", "javax", "org", "com", "")
            removeUnusedImports()
            googleJavaFormat()
        }
    }
    clean {
        delete("dashboard-app/build")
    }
    jar {
        dependsOn.add("copyDashboard")
    }
}
val buildDashboard by tasks.creating(Exec::class) {
    workingDir = File("dashboard-app")
    var npm = "npm"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        npm = "npm.cmd"
    }
    commandLine(npm, "run", "build")
}
val copyDashboard by tasks.creating(Copy::class) {
    from("dashboard-app/build")
    into("build/resources/main/META-INF/resources")
    dependsOn.add("buildDashboard")
}
val startServer by tasks.creating(Exec::class) {
    group = "server"
    workingDir = File("build")
    commandLine("java", "-jar", "$jarName-full.jar")
}